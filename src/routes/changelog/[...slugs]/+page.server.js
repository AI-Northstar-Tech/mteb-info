import { error } from '@sveltejs/kit';
import dotenv from 'dotenv';

dotenv.config();

export async function load({ params }) {
	try {
		const slug1 = params.slugs.split('/')[0];
		const slug2 = params.slugs.split('/')[1];

		const changelogRes = await fetch(
			`https://raw.githubusercontent.com/${process.env.GITHUB_OWNER}/${process.env.GITHUB_REPO}/${process.env.BRANCH}/data/changelog.json`
		);
		const changelog = await changelogRes.json();

		const primaryTabSet = new Set();
		const secondaryTabSet = new Set();
		const changelogMap = new Map();

		changelog.forEach((item) => {
			primaryTabSet.add(item.slug.split('/')[0]);
			if (item.slug.split('/')[1] && item.slug.split('/')[0] === slug1) secondaryTabSet.add(item.slug.split('/')[1]);
			changelogMap.set(item.slug, [...(changelogMap.get(item.slug) ?? []), item]);
		});
		
		const activePrimaryTabName = slug1
		const activeSeconderyTabName = slug2 ?? secondaryTabSet.values().next().value;
		const pageData = {
			primaryTabs: [...primaryTabSet].map((item) => {
				return {
					name: item,
					url: `/changelog/${encodeURI(item)}`,
					active: activePrimaryTabName === item
				};
			}),
			secondaryTabs: [...secondaryTabSet].map((item) => {
					return {
						name: item,
						url: `/changelog/${encodeURI(activePrimaryTabName)}/${encodeURI(item)}`,
						active: activeSeconderyTabName === item
					};
				}),
			changelog: changelogMap.get(activePrimaryTabName + (activeSeconderyTabName ? `/${activeSeconderyTabName}` : ''))
		};
		return pageData;
	} catch (e) {
		console.log(e);
		throw new error(404, 'Not found');
	}
}
export const config = {
	isr: {
		// Expiration time (in seconds) before the cached asset will be re-generated by invoking the Serverless Function.
		// Setting the value to `false` means it will never expire.
		expiration: 10
	}
};
